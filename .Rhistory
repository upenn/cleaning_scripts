TRUE ~replace_na(as.character(housing_assistance), ""))) %>%
mutate(housing_assistance_other_entry = case_when(housing_assistance == 3 ~
na_if(housing_assistance_other_entry, ""),
TRUE ~ housing_assistance_other_entry))
View(household)
View(household)
colnames(household)
#Make the dataframe
household = data %>%
select(., "id", contains(c("housing", "household")) & -contains(c("hardship", "services", "demo", "shocks"))) %>%
mutate(housing_type_other_entry = case_when(housing_type == 9 ~
na_if(housing_type_other_entry, ""),
TRUE ~ housing_type_other_entry)) %>%
mutate(housing_rent_entry = case_when(housing_type == 1 | housing_type == 3 | housing_type == 4 | housing_type == 5
~ housing_rent_entry,
TRUE ~replace_na(as.character(housing_rent_entry), ""))) %>%
mutate(housing_govt = case_when(housing_type == 1 | housing_type == 3 | housing_type == 4 | housing_type == 5
~ housing_govt,
TRUE ~replace_na(as.character(housing_govt), ""))) %>%
mutate(housing_govt_other_entry = case_when(housing_govt == 2 ~
na_if(housing_govt_other_entry, ""),
TRUE ~ housing_govt_other_entry)) %>%
mutate(housing_assistance = case_when(housing_type == 1 | housing_type == 3 | housing_type == 4 | housing_type == 5
~ housing_assistance,
TRUE ~replace_na(as.character(housing_assistance), ""))) %>%
mutate(housing_assistance_other_entry = case_when(housing_assistance == 3 ~
na_if(housing_assistance_other_entry, ""),
TRUE ~ housing_assistance_other_entry)) %>%
mutate(housing_mortgage = case_when(housing_type == 2 | housing_type == 6
~ housing_mortgage,
TRUE ~replace_na(as.character(housing_mortgage), ""))) %>%
mutate(housing_mortgage_entry = case_when(housing_mortgage == 1 ~
na_if(housing_mortgage_entry, ""),
TRUE ~ housing_mortgage_entry)) %>%
mutate(housing_bedrooms = case_when(housing_type == 1 | housing_type == 2 | housing_type == 3 | housing_type == 4 | housing_type == 6
~ housing_bedrooms,
TRUE ~replace_na(as.character(housing_bedrooms), "")))
View(household)
colnames(household)
hhroster = data %>%
select(., "id", contains("^hhroster"))
View(hhroster)
hhroster = data %>%
select(., "id", contains("hhroster"))
colnames(hhroster)
#Create vector list of multianswer options
hhgender = data %>% select(., contains("hhroster")) %>%
select(., contains("gender"))
#Create vector list of multianswer options
hhgender = data %>% select(., contains("hhroster")) %>%
select(., contains("gender")) %>%
colnames() %>%
str_subset("collapsed", negate = TRUE)
hhgender
hhrace = data %>% select(., contains("hhroster")) %>%
select(., contains("race")) %>%
colnames() %>%
str_subset("collapsed", negate = TRUE)
hhdemovars = c(gender,race)
hhdemovars = c(hhgender,hhrace)
#Make the dataframe
hhroster = data %>%
select(., "id", contains("hhroster"), -hhdemovars)
colnames(hhroster)
install.packages('finalfit')
install.packages("finalfit")
## Load
#Packages
library(tidyverse)
library(pointblank)
library(sjlabelled)
library(finalfit)
#Data
load('/Users/rludwig/Documents/Data_Science/Data_Files/Cleaned/P1_Baseline_Cleaned_Finvars_2023.Rdata')
cleaned = read.csv('/Users/rludwig/Documents/Data_Science/Data_Files/Cleaned/P1_Baseline_Cleaned_2023.csv')
datadict = read.csv('/Users/rludwig/Documents/Data_Science/Data_Files/Dictionaries/P1_Baseline_Datadictionary_2023.csv')
## Enable pointblank chunks
validate_rmd()
## Disable warning messages
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Create a vector to count the new variables that were generated from the data cleaning script.
newvars = cleaned %>%
select(., contains(c("multi","collapsed")) & -matches("multiple")) %>%
colnames()
#And one that counts the new variables created in the financial variables cleaning script.
newfinvars = data %>%
select(., contains(c("monthly", "annually"))) %>%
colnames()
## Organize data frames. Drop unnecessary ones, update the data dictionary, create vectors needed for module df.
#Clean up first
rm(cleaned, newfinvars, newvars)
#Split the strings in the datadictionary so that it applies correctly.
datadict = datadict %>%
mutate(value = str_split(value, ",")) %>%
mutate(value_labels = str_split(value_labels, ",")) %>%
mutate(missing_values = str_split(missing_values, ",")) %>%
mutate(labeled_values = ifelse(!is.na(value_labels), map2(value, value_labels, setNames), NA))
#Create a vector of column names of ordinal factors since pointblank doesn't like working with those
ords = data %>%
select(., contains(c("hardship", "demo", "health"))) %>%
select_if(., is.ordered) %>%
colnames(.)
## Create demo dataframe. Skip logic makes true missings unclear, so code columns to distinguish 'true' NAs.
#Create vector list of multianswer options
gender = data %>% select(., contains("demo_gender")) %>%
colnames() %>%
str_subset("collapsed", negate = TRUE)
race = data %>% select(., contains("demo_race")) %>%
colnames() %>%
str_subset("collapsed", negate = TRUE)
demovars = c(gender,race)
#Make the dataframe
demo = data %>%
select(., "id", contains("demo") & -demovars) %>%
mutate(demo_resident_time = case_when(demo_resident_address == 1 ~ replace_na(as.character(demo_resident_time), ""), TRUE ~ demo_resident_time)) %>%
mutate(across(any_of(ords), ~ factor(., ordered = FALSE))) %>%
mutate(demo_immigration_year = case_when(demo_country == 1 ~ replace_na(as.character(demo_immigration_year), ""), TRUE ~ demo_immigration_year)) %>%
mutate(demo_country_other_entry = case_when(demo_country == 6 ~ na_if(demo_country_other_entry, ""), TRUE ~ demo_country_other_entry)) %>%
mutate(demo_immigration_year_entry = case_when(demo_immigration_year == 1 ~ na_if(demo_immigration_year_entry, ""), TRUE ~ demo_immigration_year_entry)) %>%
mutate(demo_philly_entry = case_when(demo_philly_years == 2 ~ replace_na(as.character(demo_philly_entry), ""), TRUE ~ demo_philly_entry)) %>%
mutate(demo_philly_entry = case_when(demo_philly_years == 1 ~ na_if(demo_philly_entry, ""), TRUE ~ demo_philly_entry)) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Print the report
scan_data(demo, sections = "OVM", width = 1000)
explanatory = c("demo_language", "demo_age",
"demo_country")
dependent = "demo_philly_entry"
data %>%
missing_pairs(dependent, explanatory, position = "fill", )
data %>% count(demo_age)
demo_miss_report= c(explanatory,dependent)
demo_miss_report = data %>%
select(., "id", explanatory, dependent)
demo_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
View(demo_miss_report)
demo_miss_report %>% count(demo_age)
demo_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
data %>% filter(demo_language == "vi") %>% select(., "id", "demo_age") %>% View()
data %>% filter(demo_language == "vi") %>% select(., "id", "demo_country") %>% View()
data %>% select(., "id", "demo_age", demo_country") %>% View()
data %>% select(., "id", "demo_age", demo_country") %>% View()
data %>% select(., "id", "demo_age", demo_country") %>% View(.)
)
data %>% select(., "id", "demo_age", "demo_country") %>% View()
data %>% filter(demo_language == "en") %>% select(., "id", "demo_country") %>% View()
data %>% filter(demo_language == "vi") %>% select(., "id", "demo_country") %>% View()
data %>% filter(demo_language == "vi") %>% select(., "id", "demo_age") %>% View()
data %>% filter(demo_language == "en") %>% select(., "id", "demo_age") %>% View()
demo_miss_report %>%
missing_compare(dependent, explanatory)
demo_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
?missing_compare
demo_miss_report %>%
missing_compare(dependent, explanatory)
demo_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
## Missingness inspection for demo data
explanatory = c("demo_philly_entry", "demo_age",
"demo_country")
dependent = "demo_language"
demo_miss_report %>%
missing_compare(dependent, explanatory)
demo_miss_report %>%
missing_compare("demo_country", "demo_language")
demo_miss_report %>%
missing_compare("demo_country", "demo_language") %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
demo_miss_report %>%
missing_compare("demo_country", dependent)
demo_miss_report %>%
missing_compare("demo_philly_entry", dependent)
demo_miss_report %>%
missing_compare("demo_age", dependent)
demo_miss_report %>%
missing_compare(dependent, "demo_age")
demo_miss_report %>%
missing_compare("demo_age", dependent)
demo_miss_report %>%
missing_compare("demo_philly_entry", dependent)
?missing_compare
## Missingness inspection for demo data
explanatory = c("demo_philly_entry", "demo_language",
"demo_country")
dependent = "demo_age"
demo_miss_report %>%
missing_compare("demo_philly_entry", dependent)
demo_miss_report %>%
missing_compare(dependent, "demo_philly_entry")
demo_miss_report %>%
missing_compare(dependent, explanatory)
demo_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
data %>% filter(demo_language = "vi") %>% select(demo_age) %>% View()
data %>% filter(demo_language = "vi") %>% select(demo_age) %>% View(.)
data %>% filter(demo_language = "vi") %>% select(., demo_age) %>% View(.)
View(datadict)
data %>% filter(demo_language == "vi") %>% select(., "id", "demo_age") %>% View()
## Missingness inspection for demo data
demo %>% missing_pattern(dependent, explanatory)
## Missingness inspection for demo data
demo %>% missing_pattern(.)
?missing_pattern
data %>% count(shocks_relationship_end)
colnames(shocks)
data %>% count(shocks_relationship_start)
## Missingness inspection for demo data
explanatory = c("shocks_relationship_start", "demo_language",
"demo_country", "demo_gender")
dependent = "demo_age"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
## Missingness inspection for demo data
explanatory = c("shocks_relationship_start", "demo_language",
"demo_country", "demo_gender_collapsed")
dependent = "demo_age"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
shocks_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
## Missingness inspection for demo data
explanatory = c("demo_age", "demo_language",
"demo_country", "demo_gender_collapsed")
dependent = "shocks_relationship_start"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
shocks_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
## Missingness inspection for demo data
explanatory = c("demo_age", "demo_language",
"demo_country")
dependent = "demo_philly_entry"
demo_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
demo_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
demo_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
## Missingness inspection for demo data
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed")
dependent = "shocks_relationship_start"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
shocks_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
#Income increase
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed")
dependent = "shocks_household_income_increase"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
shocks_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed")
dependent = "shocks_relationship_start"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
shocks_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
shocks_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
#Create a vector of the multi answer variables to drop the individual ones.
multifins = data %>% select(., contains(c("finances_benefits", "finances_insurance_", "finances_emergency"))) %>%
colnames() %>%
str_subset("collapsed", negate = TRUE) %>%
str_subset("entry", negate = TRUE) %>%
str_subset("aca$", negate = TRUE) %>%
str_subset("insured$", negate = TRUE)
#Make the dataframe. Include a couple of extra variables that display logic depends on.
finances = data %>%
select(., "id", "demo_household_partner", "demo_household_child", "demo_household_number", "jobs_monthsworked", contains("finances")& -contains(c("hardship", "finances_insurance_multiinsured", "_annually", "_monthly"))) %>%
mutate(finances_retirement_entry = as.character(finances_retirement_entry)) %>%
mutate(finances_retirement_entry = case_when(finances_benefits_retirement == 1
~ finances_retirement_entry,
TRUE ~replace_na(as.character(finances_retirement_entry), ""))) %>%
mutate(finances_retirement_frequency = case_when(finances_retirement_entry == ""
~ replace_na(as.character(finances_retirement_frequency), ""),
TRUE ~finances_retirement_frequency)) %>%
mutate(finances_disability_entry = as.character(finances_disability_entry)) %>%
mutate(finances_disability_entry = case_when(finances_benefits_disability == 1
~ finances_disability_entry,
TRUE ~replace_na(as.character(finances_disability_entry), ""))) %>%
mutate(finances_disability_frequency = case_when(finances_disability_entry == ""
~ replace_na(as.character(finances_disability_frequency), ""),
TRUE ~finances_disability_frequency)) %>%
mutate(finances_welfare_entry = as.character(finances_welfare_entry)) %>%
mutate(finances_welfare_entry = case_when(finances_benefits_welfare == 1
~ finances_welfare_entry,
TRUE ~replace_na(as.character(finances_welfare_entry), ""))) %>%
mutate(finances_welfare_frequency = case_when(finances_welfare_entry == ""
~ replace_na(as.character(finances_welfare_frequency), ""),
TRUE ~finances_welfare_frequency)) %>%
mutate(finances_unemployment_entry = as.character(finances_unemployment_entry)) %>%
mutate(finances_unemployment_entry = case_when(finances_benefits_unemployment == 1
~ finances_unemployment_entry,
TRUE ~replace_na(as.character(finances_unemployment_entry), ""))) %>%
mutate(finances_unemployment_frequency = case_when(finances_unemployment_entry == ""
~ replace_na(as.character(finances_unemployment_frequency), ""),
TRUE ~finances_unemployment_frequency)) %>%
mutate(finances_workerscomp_entry = as.character(finances_workerscomp_entry)) %>%
mutate(finances_workerscomp_entry = case_when(finances_benefits_workerscomp == 1
~ finances_workerscomp_entry,
TRUE ~replace_na(as.character(finances_workerscomp_entry), ""))) %>%
mutate(finances_workerscomp_frequency = case_when(finances_workerscomp_entry == ""
~ replace_na(as.character(finances_workerscomp_frequency), ""),
TRUE ~finances_workerscomp_frequency)) %>%
mutate(finances_foodstamps_entry = as.character(finances_foodstamps_entry)) %>%
mutate(finances_foodstamps_entry = case_when(finances_benefits_foodstamps == 1
~ finances_foodstamps_entry,
TRUE ~replace_na(as.character(finances_foodstamps_entry), ""))) %>%
mutate(finances_foodstamps_frequency = case_when(finances_foodstamps_entry == ""
~ replace_na(as.character(finances_foodstamps_frequency), ""),
TRUE ~finances_foodstamps_frequency)) %>%
mutate(finances_support_entry = as.character(finances_support_entry)) %>%
mutate(finances_support_entry = case_when(finances_benefits_support == 1
~ finances_support_entry,
TRUE ~replace_na(as.character(finances_support_entry), ""))) %>%
mutate(finances_support_frequency = case_when(finances_support_entry == ""
~ replace_na(as.character(finances_support_frequency), ""),
TRUE ~finances_support_frequency)) %>%
mutate(finances_other_entry = as.character(finances_other_entry)) %>%
mutate(finances_other_entry = case_when(finances_benefits_other == 1
~ finances_other_entry,
TRUE ~replace_na(as.character(finances_other_entry), ""))) %>%
mutate(finances_other_frequency = case_when(finances_other_entry == ""
~ replace_na(as.character(finances_other_frequency), ""),
TRUE ~finances_other_frequency)) %>%
mutate(finances_foodstamps_spouse = case_when(finances_benefits_foodstamps == 1
~ finances_foodstamps_spouse,
TRUE ~replace_na(as.character(finances_foodstamps_spouse), ""))) %>%
mutate(finances_unemployment_months = as.character(finances_unemployment_months)) %>%
mutate(finances_unemployment_months = case_when(finances_benefits_unemployment == 1
~ finances_unemployment_months,
TRUE ~replace_na(as.character(finances_unemployment_months), ""))) %>%
mutate(finances_insurance_other_entry = case_when(finances_insurance_other == 1
~ na_if(finances_insurance_other_entry, ""),
TRUE ~ finances_insurance_other_entry)) %>%
mutate(finances_insurance_aca = case_when(finances_insurance_purchased == 1
~ finances_insurance_aca,
TRUE ~replace_na(as.character(finances_insurance_aca), ""))) %>%
mutate(finances_emergency_other_entry = case_when(finances_emergency_other == 1
~ na_if(finances_emergency_other_entry, ""),
TRUE ~ finances_emergency_other_entry)) %>%
select(., -multifins) %>%
mutate(finances_income_bracket1 = case_when(is.na(finances_income_entry)
~ finances_income_bracket1,
TRUE ~replace_na(as.character(finances_income_bracket1), ""))) %>%
mutate(finances_income_bracket2 = case_when(is.na(finances_income_bracket1)
~ finances_income_bracket2,
TRUE ~replace_na(as.character(finances_income_bracket2), ""))) %>%
mutate(finances_income_spouse_entry = as.character(finances_income_spouse_entry)) %>%
mutate(finances_income_spouse_entry = case_when(demo_household_partner == 1 | demo_household_partner == 2
~ finances_income_spouse_entry,
TRUE ~replace_na(as.character(finances_income_spouse_entry), ""))) %>%
mutate(finances_income_spouse_bracket1 = case_when(is.na(finances_income_spouse_entry)
~ finances_income_spouse_bracket1,
TRUE ~replace_na(as.character(finances_income_spouse_bracket1), ""))) %>%
mutate(finances_income_spouse_bracket2 = case_when(is.na(finances_income_spouse_bracket1)
~ finances_income_spouse_bracket2,
TRUE ~replace_na(as.character(finances_income_spouse_bracket2), ""))) %>%
mutate(finances_income_juvie_entry = as.character(finances_income_juvie_entry)) %>%
mutate(finances_income_juvie_entry = case_when(demo_household_child == 1
~ finances_income_juvie_entry,
TRUE ~replace_na(as.character(finances_income_juvie_entry), ""))) %>%
mutate(finances_income_juvie_bracket1 = case_when(is.na(finances_income_juvie_entry)
~ finances_income_juvie_bracket1,
TRUE ~replace_na(as.character(finances_income_juvie_bracket1), ""))) %>%
mutate(finances_income_juvie_bracket2 = case_when(is.na(finances_income_juvie_bracket1)
~ finances_income_juvie_bracket2,
TRUE ~replace_na(as.character(finances_income_juvie_bracket2), ""))) %>%
mutate(finances_income_adult_entry = as.character(finances_income_adult_entry)) %>%
mutate(finances_income_adult_entry = case_when(demo_household_child == 0 & demo_household_number >= 2
~ finances_income_adult_entry,
TRUE ~replace_na(as.character(finances_income_adult_entry), ""))) %>%
mutate(finances_income_adult_bracket1 = case_when(is.na(finances_income_juvie_entry)
~ finances_income_adult_bracket1,
TRUE ~replace_na(as.character(finances_income_adult_bracket1), ""))) %>%
mutate(finances_income_adult_bracket2 = case_when(is.na(finances_income_adult_bracket1)
~ finances_income_adult_bracket2,
TRUE ~replace_na(as.character(finances_income_adult_bracket2), ""))) %>%
mutate(finances_expenses_childcare = case_when(demo_household_child == 1 & jobs_monthsworked > 0
~ finances_expenses_childcare,
TRUE ~replace_na(as.character(finances_expenses_childcare), ""))) %>%
mutate(finances_childcare_entry = as.character(finances_childcare_entry)) %>%
mutate(finances_childcare_entry = case_when(finances_expenses_childcare == ""
~ replace_na(as.character(finances_childcare_entry), ""),
TRUE ~finances_childcare_entry)) %>%
mutate(finances_childcare_frequency = case_when(finances_childcare_entry == ""
~ replace_na(as.character(finances_childcare_frequency), ""),
TRUE ~finances_childcare_frequency)) %>%
mutate(finances_childcare_bracket = case_when(is.na(finances_childcare_entry)
~ finances_childcare_bracket,
TRUE ~replace_na(as.character(finances_childcare_bracket), ""))) %>%
mutate(finances_insurance_uninsured = case_when(finances_insurance == 1
~ finances_insurance_uninsured,
TRUE ~replace_na(as.character(finances_insurance_uninsured), ""))) %>%
mutate(finances_insurance_insured = case_when(finances_insurance == 2
~ finances_insurance_insured,
TRUE ~replace_na(as.character(finances_insurance_insured), ""))) %>%
mutate(finances_healthcare_bracket = case_when(is.na(finances_healthcare_entry)
~ finances_healthcare_bracket,
TRUE ~replace_na(as.character(finances_healthcare_bracket), ""))) %>%
mutate(finances_transport_bracket = case_when(is.na(finances_transport_frequency)
~ finances_transport_bracket,
TRUE ~replace_na(as.character(finances_transport_bracket), ""))) %>%
mutate(finances_loan_1000 = case_when(finances_loan_400 == 1
~ finances_loan_1000,
TRUE ~replace_na(as.character(finances_loan_1000), ""))) %>%
select(., -c("demo_household_partner", "demo_household_child", "demo_household_number", "jobs_monthsworked")) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Print the report
scan_data(finances, sections = "OVM", width = 1000)
?theme
## Missingness inspection for demo data
#Income entry
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed")
dependent = "finances_income_entry"
finances_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
finances_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
finances_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
#Income increase
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed", "demo_neigh")
dependent = "shocks_household_income_increase"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Income increase
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed", "neigh")
dependent = "shocks_household_income_increase"
shocks_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
## Missingness inspection for demo data
#Income entry
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed", "neigh")
dependent = "finances_income_entry"
finances_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
finances_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
#Insurance
explanatory = c("demo_age", "demo_language",
"demo_race_collapsed", "demo_ethnicity", "demo_gender_collapsed", "neigh")
dependent = "finances_insurance_collapsed"
finances_miss_report = data %>%
select(., "id", explanatory, dependent) %>%
mutate(across(-c(id), ~set_na(., na = datadict$missing_values[match(cur_column(), datadict$canonical_name)], as.tag = TRUE)))
#Report for discrete variables is **proportional**.
finances_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
finances_miss_report %>%
missing_compare(dependent, explanatory) %>%
knitr::kable(row.names=FALSE, align = c("l", "l", "r", "r", "r"))
#Report for discrete variables is **proportional**.
finances_miss_report %>%
missing_pairs(dependent, explanatory, position = "fill", )
library(rmarkdown)
install.packages(c("bayestestR", "blastula", "brio", "checkmate", "chromote", "cluster", "coda", "commonmark", "cpp11", "data.table", "datawizard", "DBI", "dbplyr", "digest", "dplyr", "emmeans", "foreign", "future", "getPass", "GGally", "ggeffects", "glue", "gt", "haven", "htmlTable", "httpuv", "insight", "later", "lattice", "listenv", "lubridate", "maditr", "magick", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "parameters", "pkgbuild", "pkgload", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "reactR", "readr", "reprex", "rlang", "roxygen2", "rpart", "rprojroot", "rvest", "scales", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "uuid", "V8", "vroom", "waldo", "withr", "xfun", "zip"))
install.packages(c("bayestestR", "blastula", "brio", "checkmate", "chromote", "cluster", "coda", "commonmark", "cpp11", "data.table", "datawizard", "DBI", "dbplyr", "digest", "dplyr", "emmeans", "foreign", "future", "getPass", "GGally", "ggeffects", "glue", "gt", "haven", "htmlTable", "httpuv", "insight", "later", "lattice", "listenv", "lubridate", "maditr", "magick", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "parameters", "pkgbuild", "pkgload", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "reactR", "readr", "reprex", "rlang", "roxygen2", "rpart", "rprojroot", "rvest", "scales", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "uuid", "V8", "vroom", "waldo", "withr", "xfun", "zip"))
install.packages(c("bayestestR", "blastula", "brio", "checkmate", "chromote", "cluster", "coda", "commonmark", "cpp11", "data.table", "datawizard", "DBI", "dbplyr", "digest", "dplyr", "emmeans", "foreign", "future", "getPass", "GGally", "ggeffects", "glue", "gt", "haven", "htmlTable", "httpuv", "insight", "later", "lattice", "listenv", "lubridate", "maditr", "magick", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "parameters", "pkgbuild", "pkgload", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "reactR", "readr", "reprex", "rlang", "roxygen2", "rpart", "rprojroot", "rvest", "scales", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "uuid", "V8", "vroom", "waldo", "withr", "xfun", "zip"))
install.packages(c("bayestestR", "blastula", "brio", "checkmate", "chromote", "cluster", "coda", "commonmark", "cpp11", "data.table", "datawizard", "DBI", "dbplyr", "digest", "dplyr", "emmeans", "foreign", "future", "getPass", "GGally", "ggeffects", "glue", "gt", "haven", "htmlTable", "httpuv", "insight", "later", "lattice", "listenv", "lubridate", "maditr", "magick", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "parameters", "pkgbuild", "pkgload", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "reactR", "readr", "reprex", "rlang", "roxygen2", "rpart", "rprojroot", "rvest", "scales", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "uuid", "V8", "vroom", "waldo", "withr", "xfun", "zip"))
remotes::install_github('rstudio/rmarkdown')
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
